x = -0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Good defense"
) +
annotate("text",
x = 0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Gad defense"
)
#generate the plot to visualize in RStudio and save plot locally in subfolder "EpaPerPlay_plots
plotEPA
##Creating the plot(s)
#Create a plot of offenseEPA/play (x-axis) and defenseEPA/play (y-axis).
#Note: Negative defenseEPA/play is better while positive offenseEPA/play is better
plotEPA <- offense %>%
#inner_join() strips away any x that doesn't have a matching y
dplyr::inner_join(defense, by = "team") %>%
#graph offense EPA on x, defense EPA on y
ggplot2::ggplot(aes(x = off_epa, y = def_epa)) +
#add horizontal/vertical lines for mean values of off and def EPA
nflplotR::geom_mean_lines(aes(y0 = off_epa, x0 = def_epa)) +
#add team logos for data points
nflplotR::geom_nfl_logos(aes(team_abbr = team),
width = 0.03, alpha = 0.7) +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
title = paste(year, "NFL Offensive and Defensive EPA per play"), caption = "Data from nflfastR") +
#Since a negative defensive EPA per play is better, reverse the y-axis orientation so top right is best of both
scale_y_reverse() +
theme_gray() +
theme(plot.title = element_text(size = 10,
hjust = 0.5,
face = "bold")
) +
annotate("text",
x = 0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Good defense"
) +
annotate("text",
x = -0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Bad defense"
) +
annotate("text",
x = -0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Good defense"
) +
annotate("text",
x = 0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Bad defense"
)
#generate the plot to visualize in RStudio and save plot locally in subfolder "EpaPerPlay_plots
plotEPA
##Creating the plot(s)
#Create a plot of offenseEPA/play (x-axis) and defenseEPA/play (y-axis).
#Note: Negative defenseEPA/play is better while positive offenseEPA/play is better
plotEPA <- offense %>%
#inner_join() strips away any x that doesn't have a matching y
dplyr::inner_join(defense, by = "team") %>%
#graph offense EPA on x, defense EPA on y
ggplot2::ggplot(aes(x = off_epa, y = def_epa)) +
#add horizontal/vertical lines for mean values of off and def EPA
nflplotR::geom_mean_lines(aes(y0 = off_epa, x0 = def_epa)) +
#add team logos for data points
nflplotR::geom_nfl_logos(aes(team_abbr = team),
width = 0.03, alpha = 0.7) +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
title = paste(year, "NFL Offensive and Defensive EPA per play"), caption = "Data from nflfastR") +
#Since a negative defensive EPA per play is better, reverse the y-axis orientation so top right is best of both
scale_y_reverse() +
theme_gray() +
theme(plot.title = element_text(size = 10,
hjust = 0.5,
face = "bold")
) +
annotate("text",
x = 0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Good defense"
) +
annotate("text",
x = -0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Bad defense"
) +
annotate("text",
x = -Inf, y = -Inf,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Good defense"
) +
annotate("text",
x = 0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Bad defense"
)
#generate the plot to visualize in RStudio and save plot locally in subfolder "EpaPerPlay_plots
plotEPA
##Creating the plot(s)
#Create a plot of offenseEPA/play (x-axis) and defenseEPA/play (y-axis).
#Note: Negative defenseEPA/play is better while positive offenseEPA/play is better
plotEPA <- offense %>%
#inner_join() strips away any x that doesn't have a matching y
dplyr::inner_join(defense, by = "team") %>%
#graph offense EPA on x, defense EPA on y
ggplot2::ggplot(aes(x = off_epa, y = def_epa)) +
#add horizontal/vertical lines for mean values of off and def EPA
nflplotR::geom_mean_lines(aes(y0 = off_epa, x0 = def_epa)) +
#add team logos for data points
nflplotR::geom_nfl_logos(aes(team_abbr = team),
width = 0.03, alpha = 0.7) +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
title = paste(year, "NFL Offensive and Defensive EPA per play"), caption = "Data from nflfastR") +
#Since a negative defensive EPA per play is better, reverse the y-axis orientation so top right is best of both
scale_y_reverse() +
theme_gray() +
theme(plot.title = element_text(size = 10,
hjust = 0.5,
face = "bold")
) +
annotate("text",
x = 0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Good defense"
) +
annotate("text",
x = -0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Bad defense"
) +
annotate("text",
x = -Inf, y = -Inf,
label = "Bad offense\n Good defense"
) +
annotate("text",
x = 0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Bad defense"
)
#generate the plot to visualize in RStudio and save plot locally in subfolder "EpaPerPlay_plots
plotEPA
##Creating the plot(s)
#Create a plot of offenseEPA/play (x-axis) and defenseEPA/play (y-axis).
#Note: Negative defenseEPA/play is better while positive offenseEPA/play is better
plotEPA <- offense %>%
#inner_join() strips away any x that doesn't have a matching y
dplyr::inner_join(defense, by = "team") %>%
#graph offense EPA on x, defense EPA on y
ggplot2::ggplot(aes(x = off_epa, y = def_epa)) +
#add horizontal/vertical lines for mean values of off and def EPA
nflplotR::geom_mean_lines(aes(y0 = off_epa, x0 = def_epa)) +
#add team logos for data points
nflplotR::geom_nfl_logos(aes(team_abbr = team),
width = 0.03, alpha = 0.7) +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
title = paste(year, "NFL Offensive and Defensive EPA per play"), caption = "Data from nflfastR") +
#Since a negative defensive EPA per play is better, reverse the y-axis orientation so top right is best of both
scale_y_reverse() +
theme_gray() +
theme(plot.title = element_text(size = 10,
hjust = 0.5,
face = "bold")
) +
annotate("text",
x = 0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Good defense"
) +
annotate("text",
x = -0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Bad defense"
) +
annotate("text",
x = -0.1, y = -0.1,  vjust = 1, hjust = 1,
label = "Bad offense\n Good defense"
) +
annotate("text",
x = 0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Bad defense"
)
#generate the plot to visualize in RStudio and save plot locally in subfolder "EpaPerPlay_plots
plotEPA
source("C:/Users/Arthur/Desktop/nfl/wins-and-playoffs.R", echo=TRUE)
##Creating the data
#Grab the play by play from the year 2022, filter by regular reason, filter by team with possession (eg offense)
#load the play-by-play data for 2022 season
year <- c(2023)
pbp <- nflfastR::load_pbp(year) %>%
#filter for only regular season games
dplyr::filter(season_type == "REG") %>%
#filter out only rushes and passes (no sp teams)
dplyr::filter(!is.na(posteam) & (rush == 1 | pass == 1))
#Define offensive EPA by the mean of the EPA of the team on offense
offense <- pbp %>%
dplyr::group_by(team = posteam) %>%
#strip NA values, take mean of EPA for offensive plays
dplyr::summarise(off_epa = mean(epa, na.rm = TRUE))
defense <- pbp %>%
dplyr::group_by(team = defteam) %>%
#strip NA values, take mean of EPA for defensive plays
dplyr::summarise(def_epa = mean(epa, na.rm = TRUE))
##Creating the plot(s)
#Create a plot of offenseEPA/play (x-axis) and defenseEPA/play (y-axis).
#Note: Negative defenseEPA/play is better while positive offenseEPA/play is better
plotEPA <- offense %>%
#inner_join() strips away any x that doesn't have a matching y
dplyr::inner_join(defense, by = "team") %>%
#graph offense EPA on x, defense EPA on y
ggplot2::ggplot(aes(x = off_epa, y = def_epa)) +
#add horizontal/vertical lines for mean values of off and def EPA
nflplotR::geom_mean_lines(aes(y0 = off_epa, x0 = def_epa)) +
#add team logos for data points
nflplotR::geom_nfl_logos(aes(team_abbr = team),
width = 0.03, alpha = 0.7) +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
title = paste(year, "NFL Offensive and Defensive EPA per play"), caption = "Data from nflfastR") +
#Since a negative defensive EPA per play is better, reverse the y-axis orientation so top right is best of both
scale_y_reverse() +
theme_gray() +
theme(plot.title = element_text(size = 10,
hjust = 0.5,
face = "bold")
) +
annotate("text",
x = 0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Good defense"
) +
annotate("text",
x = -0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Bad defense"
) +
annotate("text",
x = -0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Good defense"
) +
annotate("text",
x = 0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Bad defense"
)
#generate the plot to visualize in RStudio and save plot locally in subfolder "EpaPerPlay_plots
plotEPA
###Housekeeping
#clear all vars
rm(list=ls())
##Libraries and packages
#list of packages to install
packages_to_install <- c("tidyverse", "nflfastR", "nflplotR")
#check if packages already installed in library
for (package in packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages(package)
}
}
#load packages from packages_to_install
for (package in packages_to_install) {
library(package, character.only = TRUE)
}
##Creating the data
#Grab the play by play from the year 2022, filter by regular reason, filter by team with possession (eg offense)
#load the play-by-play data for 2022 season
year <- c(2023)
pbp <- nflfastR::load_pbp(year) %>%
#filter for only regular season games
dplyr::filter(season_type == "REG") %>%
#filter out only rushes and passes (no sp teams)
dplyr::filter(!is.na(posteam) & (rush == 1 | pass == 1))
#Define offensive EPA by the mean of the EPA of the team on offense
offense <- pbp %>%
dplyr::group_by(team = posteam) %>%
#strip NA values, take mean of EPA for offensive plays
dplyr::summarise(off_epa = mean(epa, na.rm = TRUE))
defense <- pbp %>%
dplyr::group_by(team = defteam) %>%
#strip NA values, take mean of EPA for defensive plays
dplyr::summarise(def_epa = mean(epa, na.rm = TRUE))
##Creating the plot(s)
#Create a plot of offenseEPA/play (x-axis) and defenseEPA/play (y-axis).
#Note: Negative defenseEPA/play is better while positive offenseEPA/play is better
plotEPA <- offense %>%
#inner_join() strips away any x that doesn't have a matching y
dplyr::inner_join(defense, by = "team") %>%
#graph offense EPA on x, defense EPA on y
ggplot2::ggplot(aes(x = off_epa, y = def_epa)) +
#add horizontal/vertical lines for mean values of off and def EPA
nflplotR::geom_mean_lines(aes(y0 = off_epa, x0 = def_epa)) +
#add team logos for data points
nflplotR::geom_nfl_logos(aes(team_abbr = team),
width = 0.03, alpha = 0.7) +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
title = paste(year, "NFL Offensive and Defensive EPA per play"), caption = "Data from nflfastR") +
#Since a negative defensive EPA per play is better, reverse the y-axis orientation so top right is best of both
scale_y_reverse() +
theme_gray() +
theme(plot.title = element_text(size = 10,
hjust = 0.5,
face = "bold")
) +
annotate("text",
x = 0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Good defense"
) +
annotate("text",
x = -0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Bad defense"
) +
annotate("text",
x = -0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Good defense"
) +
annotate("text",
x = 0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Bad defense"
)
#generate the plot to visualize in RStudio and save plot locally in subfolder "EpaPerPlay_plots
plotEPA
ggplot2::ggsave(file.path("EpaPerPlay_plots", paste("EpaPerPlay_", year, ".png")), plot = plotEPA)
###Housekeeping
#clear all vars
rm(list=ls())
source("H:/My Drive/Grad School/R stuff/nfl/EpaPerPlay.R", echo=TRUE)
getwd()
##For looping this for a year range:
#Creating the function generate_plot as
generate_EPAplot <- function(year) {
#exact same code as above...
pbp <- nflfastR::load_pbp(year) %>%
dplyr::filter(season_type == "REG") %>%
dplyr::filter(!is.na(posteam) & (rush == 1 | pass == 1))
offense <- pbp %>%
dplyr::group_by(team = posteam) %>%
dplyr::summarise(off_epa = mean(epa, na.rm = TRUE))
defense <- pbp %>%
dplyr::group_by(team = defteam) %>%
dplyr::summarise(def_epa = mean(epa, na.rm = TRUE))
plotEPA <- offense %>%
dplyr::inner_join(defense, by = "team") %>%
ggplot2::ggplot(aes(x = off_epa, y = def_epa)) +
nflplotR::geom_mean_lines(aes(y0 = off_epa, x0 = def_epa)) +
nflplotR::geom_nfl_logos(aes(team_abbr = team),
width = 0.03, alpha = 0.7) +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
title = paste(year, "NFL Offensive and Defensive EPA per play"), caption = "Data from nflfastR") +
scale_y_reverse() +
theme_gray() +
theme(plot.title = element_text(size = 10,
hjust = 0.5,
face = "bold")
) +
annotate("text",
x = 0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Good defense"
) +
annotate("text",
x = -0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Bad defense"
) +
annotate("text",
x = -0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Good defense"
) +
annotate("text",
x = 0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Bad defense"
)
ggplot2::ggsave(file.path("EpaPerPlay_plots", paste("EpaPerPlay_", year, ".png")), plot = plotEPA)
}
#Basic for loop, with the range being having a min value of 1999 (when data started)
for (year in 1999:2022) {
generate_EPAplot(year)
}
source("H:/My Drive/Grad School/R stuff/nfl/Playoffs_and_wins_LinearRegression.R", echo=TRUE)
View(playoff_outcomes)
View(win_loss_totals_allteams_allyears)
View(playoff_outcomes)
?write.csv
#Save the dataframe as a .csv for later use if needed in the data folder.
write.csv(x = win_loss_totals_allteams_allyears, file = "plots/win_loss_playoff_outcomes.csv", sep = ",", row.names = FALSE)
#Save the dataframe as a .csv for later use if needed in the data folder.
write.csv(x = win_loss_totals_allteams_allyears, file = "plots/win_loss_playoff_outcomes.csv", sep = ",", row.names = FALSE)
#Save the dataframe as a .csv for later use if needed in the data folder.
write.csv(win_loss_totals_allteams_allyears, file = "plots/win_loss_playoff_outcomes.csv", sep = ",", row.names = FALSE)
#Save the dataframe as a .csv for later use if needed in the data folder.
write.csv(win_loss_totals_allteams_allyears, file = "data/win_loss_playoff_outcomes.csv", sep = ",", row.names = FALSE)
##Creating the data
#Grab the play by play from the year 2022, filter by regular reason, filter by team with possession (eg offense)
#load the play-by-play data for 2022 season
year <- c(2023)
pbp <- nflfastR::load_pbp(year) %>%
#filter for only regular season games
dplyr::filter(season_type == "REG") %>%
#filter out only rushes and passes (no sp teams)
dplyr::filter(!is.na(posteam) & (rush == 1 | pass == 1))
#Define offensive EPA by the mean of the EPA of the team on offense
offense <- pbp %>%
dplyr::group_by(team = posteam) %>%
#strip NA values, take mean of EPA for offensive plays
dplyr::summarise(off_epa = mean(epa, na.rm = TRUE))
defense <- pbp %>%
dplyr::group_by(team = defteam) %>%
#strip NA values, take mean of EPA for defensive plays
dplyr::summarise(def_epa = mean(epa, na.rm = TRUE))
##Creating the plot(s)
#Create a plot of offenseEPA/play (x-axis) and defenseEPA/play (y-axis).
#Note: Negative defenseEPA/play is better while positive offenseEPA/play is better
plotEPA <- offense %>%
#inner_join() strips away any x that doesn't have a matching y
dplyr::inner_join(defense, by = "team") %>%
#graph offense EPA on x, defense EPA on y
ggplot2::ggplot(aes(x = off_epa, y = def_epa)) +
#add horizontal/vertical lines for mean values of off and def EPA
nflplotR::geom_mean_lines(aes(y0 = off_epa, x0 = def_epa)) +
#add team logos for data points
nflplotR::geom_nfl_logos(aes(team_abbr = team),
width = 0.03, alpha = 0.7) +
labs(x = "Offense EPA/play",
y = "Defense EPA/play",
title = paste(year, "NFL Offensive and Defensive EPA per play"), caption = "Data from nflfastR") +
#Since a negative defensive EPA per play is better, reverse the y-axis orientation so top right is best of both
scale_y_reverse() +
theme_gray() +
theme(plot.title = element_text(size = 10,
hjust = 0.5,
face = "bold")
) +
annotate("text",
x = 0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Good defense"
) +
annotate("text",
x = -0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Bad defense"
) +
annotate("text",
x = -0.1, y = -0.1,  vjust = 0.5, hjust = 0.5,
label = "Bad offense\n Good defense"
) +
annotate("text",
x = 0.1, y = 0.1,  vjust = 0.5, hjust = 0.5,
label = "Good offense\n Bad defense"
)
View(offense)
View(plotEPA)
View(win_loss_totals_allteams_allyears)
View(win_loss_tie_columns)
#Now we want to look at playoff outcome. The easiest way to do this is to look at which teams
#appeared in playoff games. Since games doesn't look at preseason games, this is simply
#every team that appeared in non-REG games.
#This is essentially a list of all playoff games.
playoff_games <- games %>%
dplyr::select(season, game_type, away_team, away_score, home_team, home_score, result, overtime) %>%
dplyr::filter(game_type != "REG") %>%
dplyr::mutate(
#set the winner based on the result column, where result >0 when home team wins
Winner = ifelse(result < 0, away_team, ifelse(result > 0, home_team, NA)),
#similar setup for loser
Loser = ifelse(result < 0, home_team, ifelse(result > 0, away_team, NA)),
#For ties, since both teams are awarded ties, we need to have both teams appear here.
Tie = ifelse(result == 0, paste(home_team, away_team, sep = ","), NA)
)
playoff_outcomes <- c()
playoff_outcomes <- playoff_games %>%
select(
season,
game_type,
Team = Loser
)
list_of_SB_winners <-c()
list_of_SB_winners <- playoff_games %>%
filter(game_type == "SB") %>%
select(
season,
game_type,
Team = Winner
) %>%
mutate(
game_type = "CHMP"
)
playoff_outcomes <- bind_rows(playoff_outcomes, list_of_SB_winners)
#Save the dataframe as a .csv for later use if needed in the data folder.
write.csv(win_loss_totals_allteams_allyears, file = "data/win_loss_playoff_outcomes.csv", row.names = FALSE)
View(win_loss_totals_allteams_allyears)
source("H:/My Drive/Grad School/R stuff/nfl/Playoffs_and_wins_LinearRegression.R", echo=TRUE)
View(playoff_outcomes)
View(playoff_outcomes)
View(playoff_outcomes)
merged_df <- merge(
win_loss_totals_allteams_allyears, playoff_outcomes, by = c("season", "team"), all.x = TRUE)
merged_df <- merge(win_loss_totals_allteams_allyears, playoff_outcomes, by = c("season", "team"), all.x = TRUE)
merged_df <- merge(win_loss_totals_allteams_allyears, playoff_outcomes, by = c("season", "team"), all.x = TRUE)
print(names(win_loss_totals_allteams_allyears))
print(names(playoff_outcomes))
View(win_loss_totals_allteams_allyears)
#add a column in win_loss_totals_allteams_allyears for playoffs and then the playoff outcome (ie last game played)
win_loss_totals_allteams_allyears$playoffs <- "NP"
View(win_loss_totals_allteams_allyears)
source("H:/My Drive/Grad School/R stuff/nfl/EpaPerPlay.R", echo=TRUE)
source("H:/My Drive/Grad School/R stuff/nfl/Playoffs_and_wins_LinearRegression.R", echo=TRUE)
View(win_loss_totals_allteams_allyears)
View(playoff_outcomes)
merged_df <- merge(win_loss_totals, playoff_outcomes, by = c("season", "team"), all.x = TRUE)
merged_df <- merge(win_loss_totals_allteams_allyears, playoff_outcomes, by = c("season", "team"), all.x = TRUE)
merged_df <- merge(win_loss_totals_allteams_allyears, playoff_outcomes, by.x = c("season", "team"), by.y = c("season", "Team"), all.x = TRUE)
View(merged_df)
win_loss_totals_allteams_allyears <- merge(win_loss_totals_allteams_allyears, playoff_outcomes, by.x = c("season", "team"), by.y = c("season", "Team"), all.x = TRUE)
View(win_loss_totals_allteams_allyears)
#add a column in win_loss_totals_allteams_allyears for playoffs and then the playoff outcome (ie last game played)
win_loss_totals_allteams_allyears$playoffs <- 0
win_loss_totals_allteams_allyears <- merge(win_loss_totals_allteams_allyears, playoff_outcomes, by.x = c("season", "team"), by.y = c("season", "Team"), all.x = TRUE)
View(win_loss_totals_allteams_allyears)
source("H:/My Drive/Grad School/R stuff/nfl/Playoffs_and_wins_LinearRegression.R", echo=TRUE)
View(win_loss_totals_allteams_allyears)
View(win_loss_totals_allteams_allyears)
win_loss_totals_allteams_allyears$playoffs <- ifelse(!is.na(win_loss_totals_allteams_allyears$game_type), 1, win_loss_totals_allteams_allyears$playoffs)
#Save the dataframe as a .csv for later use if needed in the data folder.
write.csv(win_loss_totals_allteams_allyears, file = "data/win_loss_playoff_outcomes.csv", row.names = FALSE)
##This marks the end of data cleaning and management.
#Save the dataframe as a .csv for later use if needed in the data folder.
write.csv(win_loss_totals_allteams_allyears, file = "data/win_loss_playoff_outcomes.csv", row.names = FALSE)

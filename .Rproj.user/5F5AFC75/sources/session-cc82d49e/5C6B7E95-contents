###Housekeeping
#clear all vars
rm(list=ls())

##Libraries and packages
#list of packages to install
packages_to_install <- c("tidyverse", "nflfastR", "nflplotR")

#check if packages already installed in library
for (package in packages_to_install) {                    
  if (!requireNamespace(package, quietly = TRUE)) {
    install.packages(package)
  }
}

#load packages from packages_to_install
for (package in packages_to_install) {                    
  library(package, character.only = TRUE)
}

##Documentation and information

#Documentation for nflfastR can be found here: https://www.nflfastr.com/
#or with the R function
# ?nflfastR


###Data visualization of wins and making the playoffs.
##How many wins is the "breakpoint" to make the playoffs on average?
#Using logistic regression model, we can look at made playoffs as a binary "yes"/"no", then compare to the number of wins that team got that year

#Two important notes:
#1/ The last expansion team was in 2002. This also led to conference realignment and changes to playoff format.
#2/ From 1978-2020, every team played 16 games.
#Thus, we choose our time range to be 2002-2020.
years <- c(2002:2020)
#the games df is a list of all the games played from 1999 to current day
games <- nflreadr::load_schedules() %>%
  #filter such that only the games from 2002 up to 2020 are left
  dplyr::filter(season %in% years)

#From the entire games df, we're only interested in wins/losses/ties, so we filter out the rest
#Note: result in games df is the home_team score - away_team score.
win_loss_tie_columns <- games %>%
  dplyr::select(season, game_type, away_team, away_score, home_team, home_score, result, overtime) %>%
  #use mutate() to determine who won or lost (or if the game tied, both teams) that specific game
  dplyr::mutate(
    #set the winner based on the result column, where result >0 when home team wins
    Winner = ifelse(result < 0, away_team, ifelse(result > 0, home_team, NA)),
    #similar setup for loser
    Loser = ifelse(result < 0, home_team, ifelse(result > 0, away_team, NA)),
    #For ties, since both teams are awarded ties, we need to have both teams appear here.
    Tie = ifelse(result == 0, paste(home_team, away_team, sep = ","), NA)
  )

#Get the full list of teams to add to another df down the line. 
#Note: we can use either $home_team or $away_team columns
#Note: some teams relocated (looking at you chargers) so there are more than 32 unique teams
list_of_teams <- unique(games$home_team)

#For testing our function, we'll use a single year and a single team
year <- c(2002)
team <- c("ATL")

#From the games filtered df win_loss_tie_columns, we're going to filter for only regular season games
#and also for games only where our team of interest appeared. grepl() is used here because the $Ties
#column has more than a single team (if not NA)
win_loss_totals_ATL2002 <- win_loss_tie_columns %>%
  dplyr::filter(game_type == "REG" & season == year & (Winner == team | Loser == team | grepl(team, Tie))) %>%
  #Summarize() will let us build our new df with the team name, season, and sum the wins, losses, and ties
  #Again, we need to use grepl() because of the Ties entries
  dplyr::summarize(
    team = team,
    season = year,
    wins = sum(grepl(team, Winner)),
    losses = sum(grepl(team, Loser)),
    ties = sum(grepl(team, Tie))
  )

#sanity check the df  
tibble(win_loss_tie_columns)
tibble(win_loss_totals_ATL2002)

#We aim to create a function of inputs "team" and "year" that will take all the inputs from
#the vectors years and list_of_teams and create new rows for each of those combinations
calculate_totals <- function(team,year) {
  totals <- win_loss_tie_columns %>%
    #below is the exact same code that generated our single team win/loss/tie table
    dplyr::filter(game_type == "REG" & season == year & (Winner == team | Loser == team | grepl(team, Tie))) %>%
    dplyr::summarize(
      team = team,
      season = year,
      wins = sum(grepl(team, Winner)),
      losses = sum(grepl(team, Loser)),
      ties = sum(grepl(team, Tie))
    )
  return(totals)
}

#Create an empty data frame to populate
win_loss_totals_allteams_allyears <- data.frame()
#populate the data frame with our function, running it for every team and every year
for (team in list_of_teams) {
  for (year in years) {
    win_loss_totals_allteams_allyears <- bind_rows(win_loss_totals_allteams_allyears, calculate_totals(team,year))
  }
}


#Since we made some combinations that didn't exist (the Chargers were SD before becoming the LAC when they moved)
#we need to filter out instances of years/teams where they played zero total games
win_loss_totals_allteams_allyears <- win_loss_totals_allteams_allyears %>%
  dplyr::filter(
    !(wins == 0 & losses == 0 & ties == 0)
  )

#A quick sanity check to make sure we didn't lose any games can be achieved by computing
#how many seasons any set of 32 teams appeared in (ie: how many seasons have 32 teams playing)
#and comparing that to how many seasons have actually occurred 
#Note: years from X to Y have "Y-X+1" NFL seasons in them
cat("Number of seasons worth of games have 32 teams played:", 
    #the number of rows equates to all the seasons of all the teams in the year range picked
    nrow(win_loss_totals_allteams_allyears) / 32, 
    "\n", 
    "Number of seasons actually played:", 
    #Simply the last year - first year in the range we looked at, keeping in mind the +1 season
    max(years) - min(years) + 1
)


#Now we want to look at playoff outcome. The easiest way to do this is to look at which teams
#appeared in playoff games. Since games doesn't look at preseason games, this is simply
#every team that appeared in non-REG games.
#This is essentially a list of all playoff games.
playoff_games <- games %>%
  dplyr::select(season, game_type, away_team, away_score, home_team, home_score, result, overtime) %>%
  dplyr::filter(game_type != "REG") %>%
  dplyr::mutate(
    #set the winner based on the result column, where result >0 when home team wins
    Winner = ifelse(result < 0, away_team, ifelse(result > 0, home_team, NA)),
    #similar setup for loser
    Loser = ifelse(result < 0, home_team, ifelse(result > 0, away_team, NA)),
    #For ties, since both teams are awarded ties, we need to have both teams appear here.
    Tie = ifelse(result == 0, paste(home_team, away_team, sep = ","), NA)
  )

#Make a df which will be merged with the win_loss_totals df. Includes season, team, and takes the loser of the game.
#We're taking the loser because the winner plays an additional game.
playoff_outcomes <- playoff_games %>%
  select(
    season,
    game_type,
    Team = Loser
  ) 

#The above doesn't account for the winner of the last game since that team never lost a playoff game that year.
#In order to account for this, we can look specifically at only the winner of the game_type SB games.
list_of_SB_winners <- playoff_games %>%
  filter(game_type == "SB") %>%
  select(
    season,
    game_type,
    Team = Winner
  ) %>%
#We would also like to be able to differentiate them from the loser of the game, so we'll call them "CHMP" for champion
  mutate(
    game_type = "CHMP"
  )
#Merge the two above df to get a single df that has the list of all playoff game outcomes.
playoff_outcomes <- bind_rows(playoff_outcomes, list_of_SB_winners)

#add a column in win_loss_totals_allteams_allyears for playoffs and then the playoff outcome (ie last game played)
win_loss_totals_allteams_allyears$playoffs <- 0

#merge playoff_outcomes into win_loss_totals_allteams_allyears such that the $game_type column gets added to the respective teams by matching columns season AND team
win_loss_totals_allteams_allyears <- merge(win_loss_totals_allteams_allyears, playoff_outcomes, by.x = c("season", "team"), by.y = c("season", "Team"), all.x = TRUE)
#set the value for $playoffs to 1 if the value in $game_type is not NA so that we can have a binary made/missed playoffs value
win_loss_totals_allteams_allyears$playoffs <- ifelse(!is.na(win_loss_totals_allteams_allyears$game_type), 1, win_loss_totals_allteams_allyears$playoffs)

##This marks the end of data cleaning and management.

##We can now do a logistic regression model to try to find out if making/missing the playoffs (y value, binary 0 or 1) is related to the number of wins in a season.
#We expect a very high relationship between the two since this is how the playoff format is determined.
model <- glm(playoffs ~ wins, data = win_loss_totals_allteams_allyears, family = binomial)
#Print summary of model to look if the coefficients have statistical significance
summary(model)

#Isolate $wins from the df because that seems to be an easier way to handle the data when making the plot
win_counts <- as.data.frame(table(win_loss_totals_allteams_allyears$wins))
#Slight rename of the columns
colnames(win_counts) <- c("Wins", "Frequency")

#Plotting the logistic regression model
plot <- ggplot2::ggplot(
  data = win_loss_totals_allteams_allyears,
  mapping = aes(x = wins, y = playoffs)
) +
  geom_count() +
  geom_smooth(method = "glm", method.args = list(family = "binomial")) +
  labs(x = "Wins in a season",
       y = "Playoff outcome",
       title = "Number of wins needed to make playoffs",
       caption = "Data from nflfastR",
       size = "Frequency") +
  theme_gray() +
  theme(plot.title = element_text(size = 10,
                                  hjust = 0.5,
                                  face = "bold")
  ) +
  scale_x_continuous(breaks = seq(0, 16, by = 2)) +
  scale_y_continuous(labels = c("Missed", "Made"), breaks = c(0, 1)) +
  theme(legend.position = "none")
#visualizing the plot
plot

#Evaluating the probability of making the playoffs with "x" wins using plogis()
#plogis() uses the logit function to associate odds of an outcome with the event
#Since we're looking at % chance, we need to multiply by 100
probabilities <- plogis(predict(model, type = "link")) *100
#Adding "percent change to make playoffs" column
win_loss_totals_allteams_allyears$probability_to_make_playoffs <- sprintf("%.2f",probabilities)


#Loop over the following years
years <- c(2002:2020)

#Create an empty data frame to store the output of our loop
result_df <- data.frame()

# Loop over the years vector
for (year in years) {
  pbp <- nflfastR::load_pbp(year) %>%
    dplyr::filter(season_type == "REG" & !is.na(posteam) & (rush == 1 | pass == 1))
  
  # Define offensive EPA by the mean of the EPA of the team on offense
  offense <- pbp %>%
    dplyr::group_by(team = posteam) %>%
    dplyr::summarise(off_epa = mean(epa, na.rm = TRUE))
  
  defense <- pbp %>%
    dplyr::group_by(team = defteam) %>%
    dplyr::summarise(def_epa = mean(epa, na.rm = TRUE))
  
  # Add a column with the value from the year
  offense$season <- year
  defense$season <- year
  
  # Append the results to the main data frame
  result_df <- bind_rows(result_df, offense, defense)
}

#combine such that off_epa and def_epa appear in the same row for each team
result_df_combined <- result_df %>%
  dplyr::group_by(season, team) %>%
  dplyr::summarise(across(everything(), ~na.omit(.)))
merged_df <- merge(win_loss_totals_allteams_allyears, result_df_combined, by = c("season", "team"), all.x = TRUE)
# merged_df$total_epa <- rowSums(merged_df[, c("off_epa", "def_epa")], na.rm = TRUE)
merged_df$total_epa <- merged_df$off_epa - merged_df$def_epa

#We can summarize the plogis() results by looking at the unique/distinct values of wins and probabilities
Chance_to_make_playoffs_per_win <- win_loss_totals_allteams_allyears %>%
  distinct(wins, probability_to_make_playoffs)

#We can extract even more data from our model summary, such as the deviance, residuals, AIC, etc
summary(model)


##Saving our data
#Saving our logistic regression model plot
ggplot2::ggsave("Playoff_and_wins_plots/Wins_to_make_playoffs.png", plot)
#Saving our logistic regression model 
write.csv(capture.output(summary(model)), file = "data/log_model_playoffs~wins.csv", row.names = FALSE)
#Saving the %chance to make playoffs df as a .csv
write.csv(win_counts, file = "data/win_occurrences.csv", row.names = FALSE)

#Make and save the dataframe as a .csv for later use if needed in the data folder.
common_columns <- c("season", "team")
specific_columns <- c("off_epa", "def_epa", "total_epa")
merged_df_subset <- merged_df[, c(common_columns, specific_columns)]
win_loss_totals_allteams_allyears_merged <- merge(win_loss_totals_allteams_allyears, merged_df_subset, by = common_columns, all.x = TRUE)

write.csv(win_loss_totals_allteams_allyears_merged, file = "data/win_loss_playoff_outcomes_epa.csv", row.names = FALSE)